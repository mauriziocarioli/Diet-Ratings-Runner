//created on: Dec 20, 2018
package com.grocery

//list any import classes here.
import com.grocery.NutrientDetail;
import com.grocery.Element;
import com.grocery.Ratings;
import com.grocery.ItemDetails;
import java.util.List;

//declare any global variables here

/*

        ◦ Based on the keywords, the nutrients should be grouped as elements and points should be awarded.
        ◦ Point Rules
            ▪ If the item has 3 nutrients out of listed nutrients below with %dv greater than 10, award 3 points to element Nutrient Density
            ▪ If the item has 2 nutrients out of listed nutrients below with %dv greater than 10, award 2 points to element Nutrient Density
            ▪ If the item has 3 nutrients out of listed nutrients below with %dv greater than 5, award 2 points to element Nutrient Density
            ▪ If the item doesn’t have any nutrients listed below, award 0 points.
                • Nutrients (key words):
                    ◦ Biotinstar
                    ◦ Calcium
                    ◦ Chromium

*/

rule "Use Case #1 - Point Rule 3 with > 10%"
	dialect "mvel"
    when
        $item: ItemDetails()
        List( size == 3 ) from collect( 
        	NutrientDetail(pctDVValue > 10 && description in ("Biotin","Calcium","Chromium") ) 
        	from $item.nutrientDetails 
        )
        $element: Element( elementName == "Nutrient Density" ) 
        from $item.ratings.pointsBreakup
    then
        insert($element);
        modify($element) { points += 3.0 };
end

rule "Use Case #1 - Point Rule 2 with > 10%"
	dialect "mvel"
    when
        $item: ItemDetails()
        List( size == 2 ) from collect( 
        	NutrientDetail(pctDVValue > 10 && description in ("Biotin","Calcium","Chromium") ) 
        	from $item.nutrientDetails 
        )
        $element: Element( elementName == "Nutrient Density" ) 
        from $item.ratings.pointsBreakup
    then
        insert($element);
        modify($element) { points += 2.0 };
end

rule "Use Case #1 - Point Rule 2 with > 5%"
	dialect "mvel"
    when
        $item: ItemDetails()
        List( size == 3 ) from collect( 
        	NutrientDetail(pctDVValue > 5 && description in ("Biotin","Calcium","Chromium") 
        ) from $item.nutrientDetails )
        $element: Element( elementName == "Nutrient Density" ) 
        from $item.ratings.pointsBreakup
    then
        insert($element);
        modify($element) { points += 2.0 };
end

/*
        ◦ Add a new element EPA DHA
        ◦ Point rules
            ▪ If the total (summed up) quantity of the following nutrients of an item greater than 12.5 mg and has at least 2 of the following ingredients then award 2 points. 
                • Nutrients (key word)
                    ◦ EPA
                    ◦ DHA
                • Ingredients (key word)
                    ◦ Wheat
                    ◦ Whole oat
                    ◦ Wheat berries
*/

rule "Use Case #2"
	dialect "mvel"
	when
		$item: ItemDetails()
		$totalQty: Double( compareTo(12.5) > 0 ) from accumulate(
			NutrientDetail($qty : qty, uom == "mg", description in ("EPA", "DHA") ) 
			from $item.nutrientDetails,
			sum($qty)
		)
		List(size >= 2) from collect(
			String( this in ("Wheat", "Wheat oat", "Wheat berries") ) 
			from $item.ingredientTxt.split(", ")
		)  
        $element: Element( elementName == "Nutrient Density" ) 
        from $item.ratings.pointsBreakup
	then
    	insert($element);
        modify($element) { points += 2.0 };
end

/*

        ◦ Add an element added sugar
        ◦ Point rules
            ▪ If the item has the nutrient Added Sugars and one of the following ingredient keywords, then calculate the %kcal as follows. 
Total Quantity %KCAL = 4 * Nutrient quantity * 100 / Total calories
                • Ingredients (key words)
                    ◦ Agave
                    ◦ Sweetener
                    ◦ Cane Sugar
            ▪ If the total quantity %kcal is greater than 10, then award -2 points to element Added sugars
            ▪ If the total quantity %kcal is greater than 5, then award -1 points to element Added sugars
        ◦ Star rules
            ▪ If the total points for all the elements are greater than or equal to 10, then award 3 stars to the item. 
            ▪ If the total points for all the elements are greater than or equal to 5, then award 2 stars to the item. 
            
*/

rule "Use Case #3 %kcal > 10"
	dialect "mvel"
	when
		$item: ItemDetails()
		List(size == 1) from collect(
			String( this in ("Agave", "Sweetener", "Cane Sugar") ) 
			from $item.ingredientTxt.split(", ") 
		)
		$detail: NutrientDetail( description == "Calories" )
		from $item.nutrientDetails
		$element: Element( elementName == "Added Sugars" && 4*qty*100/$detail.qty > 10 )
		from $item.ratings.pointsBreakup		
	then
		insert($element)
        modify($element){ points += -2.0; }		
end

rule "Use Case #3 %kcal > 5"
	dialect "mvel"
	when
		$item: ItemDetails()
		List(size == 1) from collect(
			String( this in ("Agave", "Sweetener", "Cane Sugar") ) 
			from $item.ingredientTxt.split(", ") 
		)
		$detail: NutrientDetail( description == "Calories" )
		from $item.nutrientDetails
		$element: Element( elementName == "Added Sugars" && 4*qty*100/$detail.qty > 5 )
		from $item.ratings.pointsBreakup		
	then
		insert($element)
        modify($element){ points += -1.0; }		
end

/*

        ◦ Star rules
            ▪ If the total points for all the elements are greater than or equal to 10, then award 3 stars to the item. 
            ▪ If the total points for all the elements are greater than or equal to 5, then award 2 stars to the item. 
            
*/

rule "Use Case #1 - Star Rule 3 stars with points >= 10"
	dialect "mvel"
	when
		$item: ItemDetails()
		$totalPoints: Double( compareTo(10.) >= 0 ) from accumulate( 
			Element($points : points) 
			from $item.ratings.pointsBreakup, 
			sum($points) 
		)
	then
		$item.ratings.rating += 3;
end

rule "Use Case #1 - Star Rule 2 stars with points >= 5"
	dialect "mvel"
	when
		$item: ItemDetails()
		$totalPoints: Double( compareTo(5.) >= 0 ) from accumulate( 
			Element($points : points) 
			from $item.ratings.pointsBreakup, 
			sum($points) 
		)
	then
		$item.ratings.rating += 2;
end